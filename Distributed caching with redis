
---

1. Redis Cluster Setup Using Docker Compose

Folder Structure

redis-cluster/
├── docker-compose.yml
├── redis-node1.conf
├── redis-node2.conf
├── redis-node3.conf

Redis Node Configuration Files

For each node (redis-node1.conf, redis-node2.conf, redis-node3.conf), use:

port 6379
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes
dir /data

Docker Compose File

version: '3.8'

services:
  redis-node1:
    image: redis:7
    container_name: redis-node1
    ports:
      - "6379:6379"
    volumes:
      - ./redis-node1.conf:/usr/local/etc/redis/redis.conf
      - ./data/node1:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - redis-cluster-network

  redis-node2:
    image: redis:7
    container_name: redis-node2
    ports:
      - "6380:6379"
    volumes:
      - ./redis-node2.conf:/usr/local/etc/redis/redis.conf
      - ./data/node2:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - redis-cluster-network

  redis-node3:
    image: redis:7
    container_name: redis-node3
    ports:
      - "6381:6379"
    volumes:
      - ./redis-node3.conf:/usr/local/etc/redis/redis.conf
      - ./data/node3:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - redis-cluster-network

networks:
  redis-cluster-network:
    driver: bridge

Start Redis Cluster

docker-compose up -d

Initialize Redis Cluster

docker exec -it redis-node1 redis-cli --cluster create \
127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 \
--cluster-replicas 1


---

2. Spring Boot Application Setup

Dependencies

Add the following dependencies to your pom.xml for Redis support:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-pool2</artifactId>
</dependency>


---

Redis Configuration for Cluster

Create a configuration class to enable connection to the Redis cluster:

@Configuration
public class RedisClusterConfig {

    @Bean
    public RedisConnectionFactory redisConnectionFactory() {
        RedisClusterConfiguration clusterConfig = new RedisClusterConfiguration();
        clusterConfig.clusterNode("127.0.0.1", 6379);
        clusterConfig.clusterNode("127.0.0.1", 6380);
        clusterConfig.clusterNode("127.0.0.1", 6381);
        return new LettuceConnectionFactory(clusterConfig);
    }

    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());
        return template;
    }

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {
        return RedisCacheManager.builder(redisConnectionFactory).build();
    }
}


---

Enable Caching in Spring Boot

Add the @EnableCaching annotation to your main class:

@SpringBootApplication
@EnableCaching
public class CacheServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(CacheServiceApplication.class, args);
    }
}


---

Service Implementation Using Cache

Example of a service using distributed caching:

@Service
public class UserService {

    @Cacheable(value = "users", key = "#userId")
    public User getUserById(String userId) {
        // Simulate a database fetch or API call
        return new User(userId, "User " + userId);
    }

    @CacheEvict(value = "users", key = "#userId")
    public void deleteUserById(String userId) {
        // Simulate user deletion
    }
}


---

Testing the Cache

Controller to test the caching:

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/{id}")
    public ResponseEntity<User> getUser(@PathVariable String id) {
        return ResponseEntity.ok(userService.getUserById(id));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable String id) {
        userService.deleteUserById(id);
        return ResponseEntity.noContent().build();
    }
}


---

3. Multiple Services Using Redis Cache

Service A: User Management

A service that uses the Redis cache for user data. The above code serves as Service A.

Service B: Order Management

Service B fetches user data from Service A and stores some intermediate data in the cache.

@Service
public class OrderService {

    @Cacheable(value = "orders", key = "#orderId")
    public Order getOrderById(String orderId) {
        // Simulate a database fetch or API call
        return new Order(orderId, "Order " + orderId);
    }

    @CacheEvict(value = "orders", key = "#orderId")
    public void deleteOrderById(String orderId) {
        // Simulate order deletion
    }
}


---

4. Deploying Multiple Services

Each microservice should have its own Spring Boot application and share the Redis cluster for caching. Ensure the Redis cluster configuration in application.yml or application.properties is consistent across services.

Sample application.yml

spring:
  redis:
    cluster:
      nodes:
        - 127.0.0.1:6379
        - 127.0.0.1:6380
        - 127.0.0.1:6381
    timeout: 2000ms

logging:
  level:
    org.springframework.cache: DEBUG


---

5. Testing the Microservices Landscape

Start Redis cluster and microservices (Service A, Service B).

Interact with the APIs:

Fetch a user from Service A (/api/users/{id}).

Fetch an order from Service B (/api/orders/{id}).


Verify Redis caching using redis-cli:

redis-cli -c
127.0.0.1:6379> keys *



---

6. Kubernetes (Optional)

If deploying in Kubernetes, use Helm charts for Redis and Spring Boot services. Redis cluster can be set up using the official Redis Helm chart with cluster mode enabled.

Let me know if you need Kubernetes instructions or additional assistance!





Yes, you can absolutely create a shared Redis configuration module that can be reused across multiple Spring Boot microservices. This modular approach improves maintainability and consistency across your services. Here's how you can do it:


---

1. Create a Shared Redis Configuration Module

Step 1: Initialize a Maven/Gradle Module

Create a new Maven or Gradle project for the Redis configuration. For example, name it redis-config.

Step 2: Add Dependencies

Add the required dependencies in the pom.xml (if using Maven):

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-pool2</artifactId>
</dependency>


---

Step 3: Create the Redis Configuration Class

In the shared module, add a configuration class that sets up Redis as a distributed cache:

package com.example.redisconfig;

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.SimpleKeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisClusterConfiguration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
@EnableCaching
public class RedisConfig {

    @Bean
    public RedisConnectionFactory redisConnectionFactory() {
        RedisClusterConfiguration clusterConfig = new RedisClusterConfiguration();
        clusterConfig.clusterNode("127.0.0.1", 6379);
        clusterConfig.clusterNode("127.0.0.1", 6380);
        clusterConfig.clusterNode("127.0.0.1", 6381);
        return new LettuceConnectionFactory(clusterConfig);
    }

    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
        redisTemplate.setConnectionFactory(connectionFactory);
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer());
        return redisTemplate;
    }

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {
        return org.springframework.data.redis.cache.RedisCacheManager.builder(redisConnectionFactory).build();
    }

    @Bean
    public SimpleKeyGenerator keyGenerator() {
        return new SimpleKeyGenerator();
    }
}


---

Step 4: Package and Publish

Package the shared configuration module into a JAR file:

mvn clean install

You can also publish it to your local Nexus/Artifactory repository if used in a distributed team environment.


---

2. Use the Shared Module in Microservices

Step 1: Add Dependency

Add the redis-config module as a dependency in the pom.xml of your microservices:

<dependency>
    <groupId>com.example</groupId>
    <artifactId>redis-config</artifactId>
    <version>1.0.0</version>
</dependency>

Step 2: Enable Redis Configuration

You don’t need to recreate the Redis configuration. Simply import the RedisConfig class into the microservice.

For example:

@SpringBootApplication
public class UserServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }
}

The RedisConfig will be automatically picked up if you use @ComponentScan or place it in the base package.


---

3. Enable and Use Caching in Microservices

Step 1: Add Caching in Services

Annotate service methods to use caching, as usual:

@Service
public class UserService {

    @Cacheable(value = "users", key = "#userId")
    public User getUserById(String userId) {
        // Simulate fetching user
        return new User(userId, "John Doe");
    }

    @CacheEvict(value = "users", key = "#userId")
    public void deleteUserById(String userId) {
        // Simulate deletion
    }
}

Step 2: Test the Caching

Test the microservices by calling APIs and verifying cache behavior.


---

4. Centralized Configuration Using Spring Cloud Config (Optional)

For managing Redis configuration centrally, you can use Spring Cloud Config:

1. Store Redis configuration (host, port, etc.) in a Config Server.


2. Fetch these properties dynamically in RedisConfig using @Value.



Example:

@Value("${spring.redis.cluster.nodes}")
private List<String> clusterNodes;

@Bean
public RedisConnectionFactory redisConnectionFactory() {
    RedisClusterConfiguration clusterConfig = new RedisClusterConfiguration(clusterNodes);
    return new LettuceConnectionFactory(clusterConfig);
}


---

5. Deploying with Kubernetes

In a Kubernetes environment:

1. Deploy the shared redis-config as a part of your services' Docker image.


2. Use ConfigMaps for Redis properties (host, port, etc.).


3. Redis Pods and Spring Boot Pods should be in the same namespace for better connectivity.




---

This approach reduces redundancy and ensures that all microservices use the same Redis configuration while allowing easy updates. Let me know if you want code samples for specific parts!



