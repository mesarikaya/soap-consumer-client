stomp

To set up a STOMP server with Spring Boot for handling different event topics and securing it using Keycloak and a gateway, follow these steps:


---

1. Set Up Spring Boot with WebSocket and STOMP

Add Dependencies

In your pom.xml (for Maven):

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-websocket</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
    <groupId>org.keycloak</groupId>
    <artifactId>keycloak-spring-boot-starter</artifactId>
    <version>21.1.1</version>
</dependency>

WebSocket Configuration

Create a configuration class:

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic"); // Topics for events
        config.setApplicationDestinationPrefixes("/app"); // Prefix for sending messages
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws")
                .setAllowedOrigins("*") // Adjust CORS as needed
                .withSockJS();
    }
}


---

2. Secure WebSocket with Keycloak

Youâ€™ll need a handshake interceptor to validate and process the Keycloak token.

WebSocket Security Config

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry;
import org.springframework.security.config.annotation.web.socket.EnableWebSocketSecurity;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;

@Configuration
@EnableWebSocketSecurity
public class WebSocketSecurityConfig {

    @Autowired
    private KeycloakAuthenticationProvider keycloakAuthenticationProvider;

    @Override
    protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {
        messages
            .simpDestMatchers("/app/**").authenticated()  // Require authentication for app destinations
            .anyMessage().permitAll();
    }

    private JwtAuthenticationConverter jwtAuthenticationConverter() {
        JwtGrantedAuthoritiesConverter authoritiesConverter = new JwtGrantedAuthoritiesConverter();
        authoritiesConverter.setAuthorityPrefix("ROLE_");
        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(authoritiesConverter);
        return jwtAuthenticationConverter;
    }
}

Add Token Validation

Use an interceptor to extract and validate the bearer token:

import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.server.HandshakeInterceptor;

import java.util.Map;

public class AuthHandshakeInterceptor implements HandshakeInterceptor {

    @Override
    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, 
                                    WebSocketHandler wsHandler, Map<String, Object> attributes) {
        // Extract and validate the Authorization header
        String authHeader = request.getHeaders().getFirst("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return false; // Reject connection
        }
        String token = authHeader.substring(7);
        // Validate token (using Keycloak API or JWT library)
        // Add token claims to attributes if valid
        return true;
    }

    @Override
    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, 
                                WebSocketHandler wsHandler, Exception exception) {
        // Post-handshake actions if needed
    }
}

Register the interceptor in your WebSocket configuration:

@Override
public void registerStompEndpoints(StompEndpointRegistry registry) {
    registry.addEndpoint("/ws")
            .addInterceptors(new AuthHandshakeInterceptor())
            .setAllowedOrigins("*")
            .withSockJS();
}


---

3. Frontend Configuration

Use a STOMP client (like Stomp.js) to send the bearer token.

Connect with Token

import SockJS from 'sockjs-client';
import Stomp from 'stompjs';

const socket = new SockJS('/ws');
const stompClient = Stomp.over(socket);

// Before connecting, set the Authorization header
const headers = {
    Authorization: `Bearer ${yourKeycloakToken}`
};

stompClient.connect(headers, frame => {
    console.log('Connected:', frame);
    // Subscribe to a topic
    stompClient.subscribe('/topic/events', message => {
        console.log('Received:', JSON.parse(message.body));
    });
}, error => {
    console.error('Error:', error);
});


---

4. Gateway Configuration

In your API Gateway, forward the Authorization header to the WebSocket service. If you're using Spring Cloud Gateway:

Add WebSocket Route

spring:
  cloud:
    gateway:
      routes:
        - id: websocket_route
          uri: lb://your-websocket-service
          predicates:
            - Path=/ws/**
          filters:
            - AddRequestHeader=Authorization, ${jwtToken} # Forward token


---

5. Keycloak Integration

In application.yml, configure Keycloak properties:

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://<keycloak-server>/realms/<realm>


---

6. Broadcast to Topics

In your controller, send messages to specific topics:

import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/events")
public class EventController {

    private final SimpMessagingTemplate messagingTemplate;

    public EventController(SimpMessagingTemplate messagingTemplate) {
        this.messagingTemplate = messagingTemplate;
    }

    @PostMapping("/send/{topic}")
    public void sendMessage(@PathVariable String topic, @RequestBody String message) {
        messagingTemplate.convertAndSend("/topic/" + topic, message);
    }
}


---

This setup ensures:

Different topics for events (/topic/<name>).

Secure token validation through Keycloak.

Frontend integration with token-based STOMP headers.

Gateway routing of WebSocket requests.


Let me know if you'd like detailed help with any specific part!



The /app prefix is used to designate application destinations in a Spring WebSocket STOMP setup. It is the prefix for messages that are sent from the client to the server (usually to be processed by server-side methods annotated with @MessageMapping).

How /app Works

1. Application Prefix:

When a client sends a message to a destination starting with /app, Spring routes it to a controller method annotated with @MessageMapping.

This is where you handle business logic or decide how to broadcast the message further.



2. Server-Side Processing:

These destinations are not directly tied to a WebSocket topic or queue. Instead, they act as an entry point for your application's backend.



3. Difference from /topic:

/topic is used for broadcasting messages to subscribers.

/app is used for incoming messages from clients.





---

Example

STOMP Message Flow:

1. Client sends to /app/chat:

stompClient.send("/app/chat", {}, JSON.stringify({ message: "Hello, World!" }));


2. Server Processes Message: On the server, a controller processes this message:

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;

@Controller
public class ChatController {

    @MessageMapping("/chat") // Matches the destination "/app/chat"
    @SendTo("/topic/messages") // Broadcasts to "/topic/messages"
    public String handleMessage(String message) {
        return "Processed: " + message;
    }
}


3. Broadcast Result:

The server processes the incoming message (/app/chat) and broadcasts a response to /topic/messages.

Clients subscribed to /topic/messages receive the broadcasted message.





---

Configuring /app Prefix

The /app prefix is defined in the WebSocket configuration:

@Override
public void configureMessageBroker(MessageBrokerRegistry config) {
    config.enableSimpleBroker("/topic"); // Broker for outgoing messages
    config.setApplicationDestinationPrefixes("/app"); // Prefix for incoming messages
}

This configuration means:

Outgoing messages: Clients subscribe to /topic/*.

Incoming messages: Clients send to /app/*.



---

Why Use /app?

Separation of Concerns:

It distinguishes client-to-server communication (/app) from server-to-client subscriptions (/topic).


Backend Control:

By routing through @MessageMapping, you can validate, modify, or even redirect messages before broadcasting.


Security and Flexibility:

You can enforce security rules or handle message processing without exposing raw topic destinations directly to clients.




---

Let me know if you'd like further clarification!

