import org.springframework.core.io.ClassPathResource;
import org.springframework.util.FileCopyUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class XmlFileReader {

    public String readXmlFile(String filePath) throws IOException {
        ClassPathResource resource = new ClassPathResource(filePath);
        try (InputStream inputStream = resource.getInputStream()) {
            byte[] bytes = FileCopyUtils.copyToByteArray(inputStream);
            return new String(bytes, StandardCharsets.UTF_8);
        }
    }

    public static void main(String[] args) {
        XmlFileReader xmlFileReader = new XmlFileReader();
        try {
            String xmlContent = xmlFileReader.readXmlFile("your/xml/file/path.xml");
            System.out.println(xmlContent);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

import javax.xml.bind.*;
import java.io.StringReader;

public class XmlToObjectConverter {
    public YourRootElement unmarshalXmlString(String xmlString) throws JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance(YourRootElement.class);
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        return (YourRootElement) unmarshaller.unmarshal(new StringReader(xmlString));
    }
}

public class Main {
    public static void main(String[] args) {
        String xmlContent = ""; // Your XML string
        XmlToObjectConverter converter = new XmlToObjectConverter();
        try {
            YourRootElement rootElement = converter.unmarshalXmlString(xmlContent);
            YourElement yourElement = rootElement.getYourElement();
            // Now you can use your Java object
        } catch (JAXBException e) {
            e.printStackTrace();
        }
    }
}

import javax.xml.bind.*;
import java.io.StringWriter;

public class ObjectToXmlConverter {
    public String marshalObjectToXml(YourRootElement rootElement) throws JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance(YourRootElement.class);
        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true); // Optional: Pretty print XML
        StringWriter stringWriter = new StringWriter();
        marshaller.marshal(rootElement, stringWriter);
        return stringWriter.toString();
    }
}

It sounds like you might be encountering dependency conflicts between ServiceA and ServiceB. Maven might be resolving the dependencies differently when building ServiceB compared to when you're building ServiceA locally in IntelliJ. 

Here are a few steps you can take to troubleshoot this:

1. **Check Dependency V `mvn dependency:tree` command to see the dependency tree and identify any conflicts.

2. **Exclude Conflicting Dependencies**: In the `pom.xml` of ServiceB, you can exclude specific dependencies that might be causing conflicts with ServiceA. This can be done using the `<exclusions>` tag within the dependency declaration.

3. **Use Maven Dependency Plugin**: The Maven Dependency Plugin (`mvn dependency:analyze`) can help identify any unused or conflicting dependencies in your project.

4. **Check for Missing Transitive Dependencies**: Sometimes, a dependency might rely on other dependencies that are not explicitly declared. Ensure that all necessary transitive dependencies are included in both projects.

5. **Update Maven Repositories**: Occasionally, issues can arise due to outdated or corrupted dependencies in your local Maven repository. Try running `mvn clean install -U` to force Maven to update its dependencies.

6. **Check IntelliJ's Maven Settings**: Ensure that IntelliJ is using the same Maven settings and repositories as your command-line environment. Sometimes, there can be discrepancies between the two which lead to different build outcomes.

By following these steps, you should be able to identify and resolve the dependency conflicts between ServiceA and ServiceB. Let me know if you need further assistance!

mvn dependency:tree -Dverbose

https://www.baeldung.com/maven-version-collision
