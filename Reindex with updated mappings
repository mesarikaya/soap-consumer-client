To achieve this while keeping the same index name, you'll need to reindex your data into a temporary index with the updated mappings and then switch back to the original index name. Here's a step-by-step process to do this:

1. **Create a temporary index with the updated mappings:**

   ```json
   PUT /temp_index
   {
     "mappings": {
       "properties": {
         "details": {
           "properties": {
             "provider": {
               "properties": {
                 "logo": {
                   "enabled": false
                 }
                 // other fields of provider can be defined here
               }
             }
             // other fields of details can be defined here
           }
         }
         // other top-level fields can be defined here
       }
     }
   }
   ```

2. **Reindex data from the original index to the temporary index:**

   ```json
   POST /_reindex
   {
     "source": {
       "index": "original_index"
     },
     "dest": {
       "index": "temp_index"
     }
   }
   ```

3. **Delete the original index:**

   ```json
   DELETE /original_index
   ```

4. **Create the original index again with the new mappings:**

   ```json
   PUT /original_index
   {
     "mappings": {
       "properties": {
         "details": {
           "properties": {
             "provider": {
               "properties": {
                 "logo": {
                   "enabled": false
                 }
                 // other fields of provider can be defined here
               }
             }
             // other fields of details can be defined here
           }
         }
         // other top-level fields can be defined here
       }
     }
   }
   ```

5. **Reindex the data from the temporary index back to the original index:**

   ```json
   POST /_reindex
   {
     "source": {
       "index": "temp_index"
     },
     "dest": {
       "index": "original_index"
     }
   }
   ```

6. **Delete the temporary index:**

   ```json
   DELETE /temp_index
   ```

### Summary of Steps:
1. Create a temporary index with the updated mapping.
2. Reindex data from the original index to the temporary index.
3. Delete the original index.
4. Recreate the original index with the updated mapping.
5. Reindex data back from the temporary index to the original index.
6. Delete the temporary index.

By following these steps, you ensure that your `logo` field is excluded from being indexed while maintaining the same index name and preserving your data.

2nd approach: Delete all and reindex

If you're open to deleting all documents in the index, you can update the mappings in place by:

1. Deleting all existing documents.
2. Updating the mapping to exclude the `logo` field.
3. Reindexing the data without the `logo` field.

Here’s how you can do it:

### 1. Delete All Documents in the Index

To delete all documents in your index, you can use the `delete_by_query` API.

```json
POST /original_index/_delete_by_query
{
  "query": {
    "match_all": {}
  }
}
```

### 2. Update the Mapping to Exclude the `logo` Field

Now that all documents are deleted, update the mapping for the index to exclude the `logo` field.

```json
PUT /original_index/_mapping
{
  "properties": {
    "details": {
      "properties": {
        "provider": {
          "properties": {
            "logo": {
              "enabled": false
            }
            // other fields of provider can be defined here
          }
        }
        // other fields of details can be defined here
      }
    }
    // other top-level fields can be defined here
  }
}
```

### 3. Reindex Data without the `logo` Field

If you have a source of truth for your data (e.g., another database or data source), reindex the data into the modified index without including the `logo` field. Here’s an example if you were to reindex data programmatically:

```json
POST /_reindex
{
  "source": {
    "index": "source_data_index"
  },
  "dest": {
    "index": "original_index"
  },
  "script": {
    "source": "ctx._source.details.provider.remove('logo')",
    "lang": "painless"
  }
}
```

### Summary of Steps:
1. Delete all documents in the index using the `delete_by_query` API.
2. Update the mapping of the index to exclude the `logo` field.
3. Reindex your data from the source without including the `logo` field.

By following these steps, you can modify the mappings and exclude the `logo` field from being indexed while keeping the same index name. Note that this approach will result in downtime and data loss until the reindexing is completed.
