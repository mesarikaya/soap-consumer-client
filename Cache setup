

---

1. Add the Redis and Cache Dependencies

In your pom.xml:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-cache</artifactId>
</dependency>


---

2. Configure Redis

Set the Redis connection details in your application.properties or application.yml.

application.properties:

spring.cache.type=redis
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.password=yourpassword # Optional
spring.redis.database=0

application.yml:

spring:
  cache:
    type: redis
  redis:
    host: localhost
    port: 6379
    password: yourpassword # Optional
    database: 0


---

3. Enable Caching in the Application

Add the @EnableCaching annotation to your main Spring Boot application class:

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching
public class CachingApplication {
    public static void main(String[] args) {
        SpringApplication.run(CachingApplication.class, args);
    }
}


---

4. Use Cache Annotations in Your Service

You can use annotations like @Cacheable, @CachePut, and @CacheEvict to define caching behavior.

Example Service:

import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.stereotype.Service;

@Service
public class DataService {

    @Cacheable(value = "dataCache", key = "#id")
    public String getDataById(String id) {
        // Simulate a heavy operation
        return "Value for ID: " + id;
    }

    @CachePut(value = "dataCache", key = "#id")
    public String updateData(String id, String newValue) {
        // Simulate data update
        return newValue;
    }

    @CacheEvict(value = "dataCache", key = "#id")
    public void deleteData(String id) {
        // Simulate data deletion
    }
}


---

5. Testing the Cache

Create a simple REST controller to test caching:

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/cache")
public class CacheController {

    @Autowired
    private DataService dataService;

    @GetMapping("/{id}")
    public String getData(@PathVariable String id) {
        return dataService.getDataById(id);
    }

    @PutMapping("/{id}")
    public String updateData(@PathVariable String id, @RequestParam String value) {
        return dataService.updateData(id, value);
    }

    @DeleteMapping("/{id}")
    public String deleteData(@PathVariable String id) {
        dataService.deleteData(id);
        return "Deleted cache for ID: " + id;
    }
}


---

6. Testing the Cache

Run the application.

Use tools like Postman or cURL to call the endpoints:

GET /cache/{id}: Fetches and caches the data.

PUT /cache/{id}?value=newValue: Updates the cached data.

DELETE /cache/{id}: Removes the cached data.




---

7. Verifying Cached Data in Redis

To verify that the data is cached:

1. Use the Redis CLI (redis-cli) and check for cached keys:

redis-cli
KEYS *


2. Get the value of a specific key:

GET "dataCache::{id}"




---

8. Cache Expiration (Optional)

You can set a time-to-live (TTL) for your cache entries in the configuration:

application.properties:

spring.cache.redis.time-to-live=60000 # TTL in milliseconds (1 minute)

This will ensure the cache entries expire after the specified time.


---

This setup should integrate Redis as a caching solution with minimal effort. Let me know if you need further help!

