To add a PEM format certificate to the Java trust store, you'll need to follow a few steps. Here's how you can do it:

### Step-by-Step Guide to Add a PEM Certificate to Java Trust Store

1. **Export the Certificate from Firefox**:
   - Follow the instructions you already used to export the certificate in PEM format.

2. **Convert PEM to DER (if needed)**:
   - Java's `keytool` can handle both PEM and DER formats, but sometimes the conversion helps. You can convert the PEM certificate to DER format using `openssl`:
     ```sh
     openssl x509 -outform der -in certificate.pem -out certificate.der
     ```

3. **Locate the Java Trust Store**:
   - The default Java trust store is typically located at `$JAVA_HOME/lib/security/cacerts`. You can find your `JAVA_HOME` environment variable to locate the Java installation directory.

4. **Import the Certificate into the Java Trust Store**:
   - Use the `keytool` command to import the certificate. You’ll need administrative privileges to modify the trust store.
   
   ```sh
   keytool -import -alias mycert -keystore $JAVA_HOME/lib/security/cacerts -file certificate.pem
   ```

   - If prompted for a password, the default password for the `cacerts` file is `changeit`.

5. **Verify the Certificate Import**:
   - You can verify that the certificate has been successfully imported by listing the contents of the trust store:
   
   ```sh
   keytool -list -v -keystore $JAVA_HOME/lib/security/cacerts -alias mycert
   ```

### Detailed Example

Here’s a detailed example assuming you have a PEM file named `certificate.pem`.

#### 1. Locate Java Home Directory
Find the `JAVA_HOME` directory. On Unix-based systems (Linux/macOS):

```sh
echo $JAVA_HOME
```

On Windows:

```cmd
echo %JAVA_HOME%
```

#### 2. Import the Certificate

Use the `keytool` command to import the certificate. Open a terminal (or Command Prompt on Windows) and run:

```sh
keytool -import -alias mycert -keystore $JAVA_HOME/lib/security/cacerts -file /path/to/certificate.pem
```

You'll see a prompt like this:

```plaintext
Enter keystore password:  (default password is `changeit`)
Owner: CN=example.com, OU=IT, O=Example Corp, L=San Francisco, ST=CA, C=US
Issuer: CN=Example CA, OU=IT, O=Example Corp, L=San Francisco, ST=CA, C=US
Serial number: 1234567890
Valid from: Mon Jan 01 00:00:00 PST 2024 until: Wed Jan 01 00:00:00 PST 2025
Certificate fingerprints:
         MD5:  00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF
         SHA1: 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
         SHA256: 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF
Signature algorithm name: SHA256withRSA
Subject Public Key Algorithm: 2048-bit RSA key
Version: 3
Trust this certificate? [no]:  yes
Certificate was added to keystore
```

#### 3. Verify the Import

You can verify that the certificate was added by listing all certificates in the keystore or checking for the specific alias:

```sh
keytool -list -v -keystore $JAVA_HOME/lib/security/cacerts -alias mycert
```

### Summary

By following these steps, you can download a certificate using Firefox, convert it if necessary, and then import it into the Java trust store. This process ensures that your Java applications can trust the server presenting the certificate. If you encounter any issues or have specific questions about a step, feel free to ask!
