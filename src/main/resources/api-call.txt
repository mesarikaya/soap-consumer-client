curl --location 'http://localhost:8081/api/v1/countries' \
--header 'Content-Type: text/plain' \
--data 'The Netherlands'

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean;

import javax.xml.namespace.QName;

@Configuration
public class SoapClientConfig {

    @Bean
    public JaxWsPortProxyFactoryBean mySoapService() {
        JaxWsPortProxyFactoryBean factoryBean = new JaxWsPortProxyFactoryBean();
        factoryBean.setWsdlDocumentUrl("http://example.com/your-service?wsdl");
        factoryBean.setServiceName(new QName("http://example.com/your-service", "YourServiceName"));
        factoryBean.setPortName(new QName("http://example.com/your-service", "YourPortName"));
        factoryBean.setServiceInterface(YourServiceInterface.class);
        factoryBean.setUsername("username");
        factoryBean.setPassword("password");
        return factoryBean;
    }
}



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>your-project</artifactId>
    <version>1.0.0</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- Add any dependencies your project requires -->
    </dependencies>

    <build>
        <plugins>
            <!-- Configure the JAX-WS Maven Plugin -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxws-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>wsimport</goal>
                        </goals>
                        <configuration>
                            <!-- Specify the location of your WSDL file -->
                            <wsdlFiles>
                                <wsdlFile>src/main/resources/wsdl/walk_location.wsdl</wsdlFile>
                            </wsdlFiles>
                            <!-- Specify the package name for generated classes -->
                            <packageName>com.example.generated</packageName>
                            <!-- Other configuration options as needed -->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <resources>
            <!-- Include WSDL files in the packaged JAR -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>wsdl/**</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>








<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>jaxws-maven-plugin</artifactId>
    <version>2.6</version>
    <executions>
        <execution>
            <goals>
                <goal>wsimport</goal>
            </goals>
            <configuration>
                <wsdlDirectory>src/main/resources/wsdl</wsdlDirectory>
                <wsdlFiles>
                    <wsdlFile>some.wsdl</wsdlFile>
                </wsdlFiles>
                <wsdlLocation>/wsdl/*</wsdlLocation>
                <packageName>com.example.generated</packageName>
                <sourceDestDir>target/generated-sources/</sourceDestDir>
            </configuration>
        </execution>
    </executions>
</plugin>


<plugin>
<groupId>org.jvnet.jax-ws-commons</groupId>
<artifactId>jaxws-maven-plugin</artifactId>
<version>2.3</version>
<executions>
    <execution>
        <goals>
            <goal>wsimport</goal>
        </goals>
    </execution>
</executions>
<configuration>
    <wsdlDirectory>src/main/resources/wsdl</wsdlDirectory>
    <wsdlFiles>
        <wsdlFile>arsdev.wsdl</wsdlFile>
    </wsdlFiles>
    <wsdlLocation>wsdl/*</wsdlLocation>
    <!-- Keep generated files -->
    <keep>true</keep>
    <packageName>jaxws.remedy.client.generated</packageName>
    <!-- generated source files destination -->
    <sourceDestDir>target/generated-code/src</sourceDestDir>
</configuration>
</plugin>

https://stackoverflow.com/questions/9802487/controlling-jax-ws-wsdllocation-attribute-values-absolute-path-with-jaxws-mav

logging:
  level:
    javax.net.ssl: DEBUG

import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.net.ssl.HttpsURLConnection;
import java.net.URL;
import java.security.cert.Certificate;

public class SoapClientUnitTest {

    @Test
    void testClientCertificates() throws Exception {
        // Create service instance
        Service service = new YourSoapService();
        YourSoapServicePortType port = service.getYourSoapServicePort();

        // Get BindingProvider
        BindingProvider bindingProvider = (BindingProvider) port;

        // Get URL connection
        URL url = new URL((String) bindingProvider.getRequestContext().get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY));
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();

        // Get server certificates
        Certificate[] serverCertificates = connection.getServerCertificates();

        // Assertions
        // Add assertions to verify that the server certificates include the expected certificate authorities or other properties
    }
}

https://stackoverflow.com/questions/11001102/how-to-programmatically-set-the-sslcontext-of-a-jax-ws-client

https://erikwramner.wordpress.com/2013/03/27/trust-self-signed-ssl-certificates-and-skip-host-name-verification-with-jax-ws/






import javax.xml.ws.handler.Handler;
import javax.xml.ws.handler.MessageContext;
import java.util.Set;

public class CustomHandler implements Handler<SOAPMessageContext> {

    @Override
    public boolean handleMessage(SOAPMessageContext context) {
        // Check if this is an outbound message
        boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
        if (outbound) {
            // Access the BindingProvider from the SOAPMessageContext
            BindingProvider bindingProvider = (BindingProvider) context.get(BindingProvider.class.getName());
            
            // Access the SSL context from the BindingProvider
            SSLContext sslContext = (SSLContext) bindingProvider.getRequestContext().get("com.sun.xml.internal.ws.transport.https.client.SSLSocketFactory");
            
            // Check if the SSL context contains client certificates
            // If not, add client certificates to the SSL context
            // Implement the logic to add client certificates if necessary
            
            // Example:
            // if (sslContext != null && !containsClientCertificates(sslContext)) {
            //    addClientCertificates(sslContext);
            // }
        }
        return true;
    }

    // Implement methods to check for and add client certificates as needed
}





import javax.xml.ws.BindingProvider;
import java.util.Map;

public class CustomHTTPInterceptor {

    public void interceptOutgoingRequest(BindingProvider bindingProvider) {
        // Access the request context
        Map<String, Object> requestContext = bindingProvider.getRequestContext();

        // Check if the necessary SSL/TLS headers are present
        if (requestContext.containsKey("javax.net.ssl.keyStore") && requestContext.containsKey("javax.net.ssl.trustStore")) {
            System.out.println("Certificates added to outgoing request headers.");
        } else {
            System.out.println("Certificates not found in outgoing request headers.");
        }
    }
}





public class SoapClient {

    public static void main(String[] args) {
        // Create service instance
        YourSoapService service = new YourSoapService();
        YourSoapServicePortType port = service.getYourSoapServicePort();

        // Get BindingProvider
        BindingProvider bindingProvider = (BindingProvider) port;

        // Use the custom HTTP interceptor to inspect outgoing requests
        CustomHTTPInterceptor interceptor = new CustomHTTPInterceptor();
        interceptor.interceptOutgoingRequest(bindingProvider);

        // Make SOAP call
        // ...
    }
}


